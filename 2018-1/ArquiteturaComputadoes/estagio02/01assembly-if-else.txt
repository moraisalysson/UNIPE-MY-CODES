;SIMULANDO IF-ELSE
    ;  a = 3
    ;  b = 1
    ;  c = 0
    ;  if(a >= b) {
    ;    c = a - b; }
    ;  else {
    ;    c = b - a; }
    
    ; base = 100 (0x64): endereço base dos operandos e tbm guarda o valor 0
    ; base + 4 (0x68): endereço de "a"
    ; base + 8 (0x6C): endereço de "b"
    ; base + 12 (0x70): endereço de "c"


    addi $0, $0, 100       ; <- 0: $0 recebe 100 (0x64), endereço base dos operandos

    addi $1, $1, 3         ; <- 1: $1 recebe o valor de "a"

    sw $1, 4($0)           ; 2: transporta o VALOR de "a" para seu enderço na memória

    lw $1, 0($0)           ; 3: zerando $1

    addi $1, $1, 1         ; <- 4: $1 recebe o valor de "b"

    sw $1, 8($0)           ; 5: transporta o VALOR de "b" para seu endereço na memória

;verificando se "a" >= "b":
    lw $1, 4($0)           ; 6: busca VALOR de "a" na memória e atribui a $1

    lw $2, 8($0)           ; 7: busca VALOR de "b" da memória e atribui a $2

    slt $3, $1, $2         ; 8: verificando se $1("a") >= $2("b"): se TRUE: $3 = 0, senão $3 = 1

    lw $1, 0($0)           ; 9: zerando $1

    beq $3, $1, TRUE       ; 10: se $3 == $1(0), pular para label TRUE

;fim da verificação

    j FALSE                ; 11: senão, pular para FALSE

    TRUE:
         lw $1, 4($0)      ; 12: busca VALOR de "a" na memória e atribui a $1

         lw $2, 8($0)      ; 13: busca VALOR de "b" da memória e atribui a $2

         sub $1, $1, $2    ; 14: $1 = $1("a") - $2("b")

         sw $1, 12($0)     ; 15: transporta o resultado da subtração para o endereço de "c" na memória

    j FIM                  ; 16

    FALSE:               
         lw $1, 8($0)      ; 17: busca VALOR de "b" da memória e atribui a $1

         lw $2, 4($0)      ; 18: busca VALOR de "a" na memória e atribui a $2

         sub $1, $1, $2    ; 19: $1 = $1("b") - $2("a")

         sw $1, 12($0)     ; 20: transporta o resultado da subtração para o endereço de "c" na memória

    FIM: 
    
    j FIM                  ; 21